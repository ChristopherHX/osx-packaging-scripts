name: CI
on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
jobs:
  build:
    runs-on: macos-latest
    steps:
    - name: Set Environment Variables
      run: |
        IFS='/' read -ra REPO <<< "${GITHUB_REPOSITORY}"
        echo "::set-env REPO_USER=${REPO[0]}"
        echo "::set-env REPO_NAME=${REPO[1]}"
        IFS='/' read -ra REF <<< "${GITHUB_REF}"
        echo "::set-env BRANCH_NAME=${REF[2]}"
    - uses: actions/checkout@v1
    - uses: actions/checkout@v1
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: 5d1c9b28f01ef0b01225f92670ee587b430efa8e
        token: ${{ secrets.MacOSX1014sdk }}
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: Download old dmg's
      run: |
        mkdir -p sparcle/
        git clone https://github.com/ChristopherHX/github-release-downloader.git grd
        cd grd
        npm install
        npm run-script build
        cd ..
        grd/bin/grd --token ${{ secrets.GITHUB_TOKEN }} --owner ChristopherHX --repository osx-packaging-scripts --filter-asset '^.*\.dmg$' --match-version 'ng\.dmg' --output sparcle/
        mv sparcle/${GITHUB_REPOSITORY}/ng.dmg/*.dmg sparcle/
    - name: Apply custom patch and Update brew
      working-directory: "/usr/local/Homebrew"
      run: |
        git remote add fork https://github.com/ChristopherHX/brew.git
        git fetch fork
        git config --global user.email "CI@local"
        git config --global user.name "CI Bot"
        git checkout fork/master
    - name: Install brew dependencies / Download QT
      working-directory: ${{ github.workspace }}/../osx-packaging-scripts
      run: |
        HOMEBREW_NO_AUTO_UPDATE=1 brew install p7zip
        # Start Qt download parallel to save time
        ./download_qt.sh &
        PID=$!
        export HOMEBREW_MACOSX_DEPLOYMENT_TARGET=10.12.0
        export HOMEBREW_SDKROOT=${{ github.workspace }}/../MacOSX10.14.sdk
        HOMEBREW_NO_AUTO_UPDATE=1 brew reinstall python libzip
        HOMEBREW_NO_AUTO_UPDATE=1 brew install libuv protobuf
        # Wait for QT Download, it is faster than brew
        wait $PID
    - uses: actions/setup-python@v1
      with:
        python-version: '3.x' # Version range or exact version of a Python version to use, using semvers version range syntax.
        architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
    - uses: actions/setup-python@v1
      with:
        python-version: '2.x' # Version range or exact version of a Python version to use, using semvers version range syntax.
        architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified  
    - name: Install python dependencies
      run: python3 -m pip install --upgrade pip && pip3 install jinja2 ds_store
    - name: Build
      working-directory: ${{ github.workspace }}/../osx-packaging-scripts
      run: |
        export MACOSX_DEPLOYMENT_TARGET=10.12
        export SDKROOT=${{ github.workspace }}/../MacOSX10.14.sdk
        python3 __main__.py --qt-path qt/*/* --update-sparkle-appcast https://github.com/${GITHUB_REPOSITORY}/releases/download/ng.dmg/appcast.xml --update-sparkle-ed-public-key ${{ secrets.SPARKLE_ECDSA_PUB }} --version "0.0.${GITHUB_RUN_NUMBER}"
    - name: Build .dmg
      working-directory: ${{ github.workspace }}/../osx-packaging-scripts
      run: python3 build_dmg.py
    - name: Generate Dist
      run: |
        DMG_FILENAME="sparcle/Minecraft_Bedrock_Launcher.0.0.${GITHUB_RUN_NUMBER}.dmg"
        mv "${{ github.workspace }}/../osx-packaging-scripts/output/Minecraft Bedrock Launcher.dmg" "${DMG_FILENAME}"
        qt/*/*/bin/generate_appcast -s ${{ secrets.SPARKLE_ECDSA }} sparcle/
        mkdir -p dist
        sed 's/\%20/./g' sparcle/appcast.xml > dist/appcast.xml
        mv sparcle/*.delta dist/|| :
        mv "${DMG_FILENAME}" dist/
        echo build_id=${GITHUB_RUN_NUMBER}$'\n'download_url=https://github.com/${GITHUB_REPOSITORY}/releases/download/ng.dmg/Minecraft_Bedrock_Launcher.dmg > dist/version.osx
    - name: Upload Latest
      run: |
        curl -L https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_darwin_amd64.zip --output ghr.zip
        unzip ghr.zip
        ./ghr*/ghr -t ${{ secrets.GITHUB_TOKEN }} -u ChristopherHX -r osx-packaging-scripts -recreate -prerelease -b "# NO SUPPORT THIS IS A TEST RELEASE" ng.dmg dist/
