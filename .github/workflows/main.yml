name: CI
on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
jobs:
  build-libcxx32:
    runs-on: macos-latest
    steps:
    - name: Check Cache libcxx32
      id: libcxx32-llvm
      uses: Mystraht/cache@master
      env:
        cache-name: cache-libcxx32-macos-10-10
      with:
        path: libcxx32-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx32
      if: steps.libcxx32-llvm.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx32-macos-10-10
      with:
        path: libcxx32-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.libcxx32-llvm.outputs.cache-hit != 'true'
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: 5d1c9b28f01ef0b01225f92670ee587b430efa8e
        token: ${{ secrets.MacOSX1014sdk }}
    - name: Build libcxx, libcxxabi, libunwind
      if: steps.libcxx32-llvm.outputs.cache-hit != 'true'
      run: |
        export MACOSX_DEPLOYMENT_TARGET=10.10.0
        export SDKROOT=${{ github.workspace }}/../MacOSX10.14.sdk
        git clone https://github.com/llvm/llvm-project.git llvm
        mkdir -p libcxx32-build
        cd libcxx32-build
        cmake ../llvm/llvm -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi;libunwind" -DLIBCXX_CXX_ABI=libcxxabi -DLIBCXXABI_USE_LLVM_UNWINDER=ON -DCMAKE_BUILD_TYPE=Release -DLIBCXX_BUILD_32_BITS=ON -DLIBCXXABI_BUILD_32_BITS=ON -DLIBUNWIND_BUILD_32_BITS=ON -DLLVM_BUILD_32_BITS=ON
        make -j4 cxx cxxabi unwind
  build-libcxx64:
    runs-on: macos-latest
    steps:
    - name: Check Cache libcxx64
      id: libcxx64-llvm
      uses: Mystraht/cache@master
      env:
        cache-name: cache-libcxx64-macos-10-10
      with:
        path: libcxx64-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx64
      if: steps.libcxx64-llvm.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx64-macos-10-10
      with:
        path: libcxx64-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.libcxx64-llvm.outputs.cache-hit != 'true'
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: 5d1c9b28f01ef0b01225f92670ee587b430efa8e
        token: ${{ secrets.MacOSX1014sdk }}
    - name: Build libcxx, libcxxabi, libunwind
      if: steps.libcxx64-llvm.outputs.cache-hit != 'true'
      run: |
        export MACOSX_DEPLOYMENT_TARGET=10.10.0
        export SDKROOT=${{ github.workspace }}/../MacOSX10.14.sdk
        git clone https://github.com/llvm/llvm-project.git llvm
        mkdir -p libcxx64-build
        cd libcxx64-build
        cmake ../llvm/llvm -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi;libunwind" -DLIBCXX_CXX_ABI=libcxxabi -DLIBCXXABI_USE_LLVM_UNWINDER=ON -DCMAKE_BUILD_TYPE=Release
        make -j4 cxx cxxabi unwind
  build-libcxx:
    runs-on: macos-latest
    needs: [build-libcxx32,build-libcxx64]
    steps:
    - name: Check libcxx
      id: libcxx-llvm
      uses: Mystraht/cache@master
      env:
        cache-name: cache-libcxx-3-macos-10-10
      with:
        path: libcxx-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx32
      if: steps.libcxx-llvm.outputs.cache-hit != 'true'
      id: libcxx32-llvm
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx32-macos-10-10
      with:
        path: libcxx32-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx64
      if: steps.libcxx-llvm.outputs.cache-hit != 'true'
      id: libcxx64-llvm
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx64-macos-10-10
      with:
        path: libcxx64-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx
      if: steps.libcxx-llvm.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx-3-macos-10-10
      with:
        path: libcxx-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Build universal lib
      if: steps.libcxx-llvm.outputs.cache-hit != 'true'
      run: |
        mkdir -p libcxx-build/
        lipo -create libcxx32-build/lib/libc++.dylib libcxx64-build/lib/libc++.dylib -output libcxx-build/libc++.1.dylib
        lipo -create libcxx32-build/lib/libc++abi.dylib libcxx64-build/lib/libc++abi.dylib -output libcxx-build/libc++abi.1.dylib
        lipo -create libcxx32-build/lib/libunwind.dylib libcxx64-build/lib/libunwind.dylib -output libcxx-build/libunwind.1.dylib
        cd libcxx-build
        ln -s libc++.1.dylib libc++.dylib
        ln -s libc++abi.1.dylib libc++abi.dylib
        ln -s libunwind.1.dylib libunwind.dylib
        install_name_tool -rpath @loader_path/../lib @loader_path/../Frameworks libc++.dylib
        install_name_tool -rpath @loader_path/../lib @loader_path/../Frameworks libc++abi.dylib
        install_name_tool -rpath @loader_path/../lib @loader_path/../Frameworks libunwind.dylib
  brew-libzip:
    runs-on: macos-latest
    steps:
    - name: Check for libzip
      id: cache-brew-libzip
      uses: Mystraht/cache@master
      env:
        cache-name: cache-brew-libzip-macos-10-10
      with:
        path: /usr/local/Cellar/libzip
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libzip
      if: steps.cache-brew-libzip.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-brew-libzip-macos-10-10
      with:
        path: /usr/local/Cellar/libzip
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.cache-brew-libzip.outputs.cache-hit != 'true'
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: 5d1c9b28f01ef0b01225f92670ee587b430efa8e
        token: ${{ secrets.MacOSX1014sdk }}
    - name: Apply custom patch and Update brew
      if: steps.cache-brew-libzip.outputs.cache-hit != 'true'
      working-directory: "/usr/local/Homebrew"
      run: |
        git remote add fork https://github.com/ChristopherHX/brew.git
        git fetch fork
        git config --global user.email "CI@local"
        git config --global user.name "CI Bot"
        git checkout fork/master
    - name: Install brew dependencies
      if: steps.cache-brew-libzip.outputs.cache-hit != 'true'
      working-directory: ${{ github.workspace }}/../osx-packaging-scripts
      run: |
        export HOMEBREW_MACOSX_DEPLOYMENT_TARGET=10.10.0
        export HOMEBREW_SDKROOT=${{ github.workspace }}/../MacOSX10.14.sdk
        HOMEBREW_NO_AUTO_UPDATE=1 brew reinstall libzip
  brew-protobuf:
    runs-on: macos-latest
    steps:
    - name: Check for protobuf
      id: cache-brew-protobuf
      uses: Mystraht/cache@master
      env:
        cache-name: cache-brew-protobuf-macos-10-10
      with:
        path: /usr/local/Cellar/protobuf
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache protobuf
      if: steps.cache-brew-protobuf.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-brew-protobuf-macos-10-10
      with:
        path: /usr/local/Cellar/protobuf
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.cache-brew-protobuf.outputs.cache-hit != 'true'
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: 5d1c9b28f01ef0b01225f92670ee587b430efa8e
        token: ${{ secrets.MacOSX1014sdk }}
    - name: Apply custom patch and Update brew
      if: steps.cache-brew-protobuf.outputs.cache-hit != 'true'
      working-directory: "/usr/local/Homebrew"
      run: |
        git remote add fork https://github.com/ChristopherHX/brew.git
        git fetch fork
        git config --global user.email "CI@local"
        git config --global user.name "CI Bot"
        git checkout fork/master
    - name: Install brew dependencies
      if: steps.cache-brew-protobuf.outputs.cache-hit != 'true'
      working-directory: ${{ github.workspace }}/../osx-packaging-scripts
      run: |
        export HOMEBREW_NO_AUTO_UPDATE=1
        brew install automake
        export HOMEBREW_MACOSX_DEPLOYMENT_TARGET=10.10.0
        export HOMEBREW_SDKROOT=${{ github.workspace }}/../MacOSX10.14.sdk
        brew reinstall python@3.8 || brew install python@3.8
        brew reinstall protobuf || brew install protobuf
  brew-libuv:
    runs-on: macos-latest
    steps:
    - name: Check for libuv
      id: cache-brew-libuv
      uses: Mystraht/cache@master
      env:
        cache-name: cache-brew-libuv-macos-10-10
      with:
        path: /usr/local/Cellar/libuv
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libuv
      if: steps.cache-brew-libuv.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-brew-libuv-macos-10-10
      with:
        path: /usr/local/Cellar/libuv
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.cache-brew-libuv.outputs.cache-hit != 'true'
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: 5d1c9b28f01ef0b01225f92670ee587b430efa8e
        token: ${{ secrets.MacOSX1014sdk }}
    - name: Apply custom patch and Update brew
      if: steps.cache-brew-libuv.outputs.cache-hit != 'true'
      working-directory: "/usr/local/Homebrew"
      run: |
        git remote add fork https://github.com/ChristopherHX/brew.git
        git fetch fork
        git config --global user.email "CI@local"
        git config --global user.name "CI Bot"
        git checkout fork/master
    - name: Install brew dependencies
      if: steps.cache-brew-libuv.outputs.cache-hit != 'true'
      working-directory: ${{ github.workspace }}/../osx-packaging-scripts
      run: |
        HOMEBREW_NO_AUTO_UPDATE=1 brew install automake sphinx-doc
        export HOMEBREW_MACOSX_DEPLOYMENT_TARGET=10.10.0
        export HOMEBREW_SDKROOT=${{ github.workspace }}/../MacOSX10.14.sdk
        HOMEBREW_NO_AUTO_UPDATE=1 brew install libuv
  build:
    runs-on: macos-latest
    needs: [brew-libzip, brew-protobuf, brew-libuv, build-libcxx]
    strategy:
      matrix:
        target: [ "10.10.0", 10.12.0", "10.13.0" ]
      include:
        - os: "10.10.0"
          QT_BASE_URL: http://download.qt.io/online/qtsdkrepository/mac_x64/desktop/qt5_592/
          QT_VERSION_SHORT: 5.9.2
          QT_VERSION: 5.9.2-0-201710050729
          QT_PACKAGE_PREFIX: qt.592.
          QT_PACKAGE_SUFFIX: clang_64
          QT_PREBUILT_SUFFIX: -MacOS-OSX_10_10-Clang-MacOS-OSX_10_10-X86_64
        - os: "10.12.0"
          QT_BASE_URL: http://download.qt.io/online/qtsdkrepository/mac_x64/desktop/qt5_5113/
          QT_VERSION_SHORT: 5.11.3
          QT_VERSION: 5.11.3-0-201811291904
          QT_PACKAGE_PREFIX: qt.qt5.5113.
          QT_PACKAGE_SUFFIX: clang_64
          QT_PREBUILT_SUFFIX: -MacOS-MacOS_10_12-Clang-MacOS-MacOS_10_12-X86_64
        - os: "10.13.0"
          QT_BASE_URL: http://download.qt.io/online/qtsdkrepository/mac_x64/desktop/qt5_5150/
          QT_VERSION_SHORT: 5.15.0
          QT_VERSION: 5.15.0-0-202005140805
          QT_PACKAGE_PREFIX: qt.qt5.5150.
          QT_PACKAGE_SUFFIX: clang_64
          QT_PREBUILT_SUFFIX: -MacOS-MacOS_10_13-Clang-MacOS-MacOS_10_13-X86_64
    steps:
    - name: Set Environment Variables
      run: |
        IFS='/' read -ra REPO <<< "${GITHUB_REPOSITORY}"
        echo "::set-env REPO_USER=${REPO[0]}"
        echo "::set-env REPO_NAME=${REPO[1]}"
        IFS='/' read -ra REF <<< "${GITHUB_REF}"
        echo "::set-env BRANCH_NAME=${REF[2]}"
    - uses: actions/checkout@v1
    - uses: actions/checkout@v1
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: 5d1c9b28f01ef0b01225f92670ee587b430efa8e
        token: ${{ secrets.MacOSX1014sdk }}
    - name: Cache libcxx32
      id: libcxx32-llvm
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx32-macos-10-10
      with:
        path: libcxx32-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx64
      id: libcxx64-llvm
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx64-macos-10-10
      with:
        path: libcxx64-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx
      id: libcxx-llvm
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx-3-macos-10-10
      with:
        path: libcxx-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Install python dependencies
      run: pip3 install jinja2 ds_store
    - name: Restore libzip
      uses: actions/cache@v1
      env:
        cache-name: cache-brew-libzip-macos-10-10
      with:
        path: /usr/local/Cellar/libzip
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Restore protobuf
      uses: actions/cache@v1
      env:
        cache-name: cache-brew-protobuf-macos-10-10
      with:
        path: /usr/local/Cellar/protobuf
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Restore libuv
      uses: actions/cache@v1
      env:
        cache-name: cache-brew-libuv-macos-10-10
      with:
        path: /usr/local/Cellar/libuv
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: brew install / link
      run: |
        brew install p7zip automake
        HOMEBREW_NO_AUTO_UPDATE=1 brew unlink libzip
        HOMEBREW_NO_AUTO_UPDATE=1 brew link libuv protobuf libzip
    - name: Cache qt
      id: cache-qt
      uses: actions/cache@v1
      env:
        cache-name: cache-qt-macos-${{ matrix.target }}
      with:
        path: qt
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Download Qt
      if: steps.cache-qt.outputs.cache-hit != 'true'
      run: |
        export QT_BASE_URL=${{ matrix.QT_BASE_URL }}
        export QT_VERSION_SHORT=${{ matrix.QT_VERSION_SHORT }}
        export QT_VERSION=${{ matrix.QT_VERSION }}
        export QT_PACKAGE_PREFIX=${{ matrix.QT_PACKAGE_PREFIX }}
        export QT_PACKAGE_SUFFIX=${{ matrix.QT_PACKAGE_SUFFIX }}
        export QT_PREBUILT_SUFFIX=${{ matrix.QT_PREBUILT_SUFFIX }}
        ./download_qt.sh
    - name: Build
      working-directory: ${{ github.workspace }}/../osx-packaging-scripts
      run: |
        export MACOSX_DEPLOYMENT_TARGET=${{ matrix.target }}
        export SDKROOT=${{ github.workspace }}/../MacOSX10.14.sdk
        python3 __main__.py --qt-path qt/*/* --update-sparkle-appcast https://github.com/${GITHUB_REPOSITORY}/releases/download/stable/appcast.xml --update-sparkle-ed-public-key ${{ secrets.SPARKLE_ECDSA_PUB }} --version "0.0.${GITHUB_RUN_NUMBER}" --buildangle
    - name: Build .dmg
      working-directory: ${{ github.workspace }}/../osx-packaging-scripts
      run: python3 build_dmg.py
    - name: Generate Dist
      run: |
        DMG_FILENAME="Minecraft_Bedrock_Launcher_0.0.${GITHUB_RUN_NUMBER}_macOS_${{ matrix.target }}.dmg"
        mkdir -p dist
        mv "${{ github.workspace }}/../osx-packaging-scripts/output/Minecraft Bedrock Launcher.dmg" "dist/${DMG_FILENAME}"
        echo build_id=${GITHUB_RUN_NUMBER}$'\n'download_url=https://github.com/${GITHUB_REPOSITORY}/releases/download/stable/${DMG_FILENAME} > dist/version.osx
    - name: Upload Latest
      run: |
        curl -L https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_darwin_amd64.zip --output ghr.zip
        unzip ghr.zip
        ./ghr*/ghr -t ${{ secrets.GITHUB_TOKEN }} -u ChristopherHX -r osx-packaging-scripts -replace -prerelease -b "# NO SUPPORT THIS IS A TEST RELEASE" stable dist/
  upload:
    runs-on: macos-latest
    needs: build
    steps:
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: Download old dmg's
      run: |
        mkdir -p sparkle/
        git clone https://github.com/ChristopherHX/github-release-downloader.git grd
        cd grd
        npm install
        npm run-script build
        cd ..
        grd/bin/grd --token ${{ secrets.GITHUB_TOKEN }} --owner ChristopherHX --repository osx-packaging-scripts --filter-asset '^.*\.dmg$' --match-version 'stable' --output sparkle/
        mv sparkle/${GITHUB_REPOSITORY}/stable/*.dmg sparkle/ || :
    - name: Generate Dist
      run: |
        curl -L -C - -o sparkle.tar.bz2 https://github.com/sparkle-project/Sparkle/releases/download/1.23.0/Sparkle-1.23.0.tar.bz2
        tar -xf ./sparkle.tar.bz2
        ./bin/generate_appcast -s ${{ secrets.SPARKLE_ECDSA }} sparkle/
        mkdir -p dist
        sed 's/\%20/./g' sparkle/appcast.xml > dist/appcast.xml
        mv sparkle/*.delta dist/|| :
    - name: Upload Latest
      run: |
        curl -L https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_darwin_amd64.zip --output ghr.zip
        unzip ghr.zip
        ./ghr*/ghr -t ${{ secrets.GITHUB_TOKEN }} -u ChristopherHX -r osx-packaging-scripts -replace -prerelease -b "# NO SUPPORT THIS IS A TEST RELEASE" stable dist/